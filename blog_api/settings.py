"""
Django settings for blog_api project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from environ import Env
from datetime import timedelta
import dj_database_url
import os
from google.oauth2 import service_account

env = Env(
    DEBUG=(bool, False),
    ALLOWED_HOSTS=(list, []),
    ACCESS_TOKEN_LIFETIME_WEEKS=(int, 0),
    ACCESS_TOKEN_LIFETIME_DAYS=(int, 2),
    ACCESS_TOKEN_LIFETIME_HOURS=(int, 0),
    ACCESS_TOKEN_LIFETIME_MINUTES=(int, 0),
    REFRESH_TOKEN_LIFETIME_WEEKS=(int, 0),
    REFRESH_TOKEN_LIFETIME_DAYS=(int, 5),
    REFRESH_TOKEN_LIFETIME_HOURS=(int, 0),
    REFRESH_TOKEN_LIFETIME_MINUTES=(int, 0),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

Env.read_env(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = list(
    env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1']))

# show debug toolbar for localhost in development mode
if DEBUG:
    INTERNAL_IPS = ["127.0.0.1"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'debug_toolbar',
    'corsheaders',
    'storages',
    'drf_standardized_errors',
    'rest_framework_simplejwt',
    'drf_yasg',
    'accounts',
    'blog',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware'
]

ROOT_URLCONF = 'blog_api.urls'

REST_FRAMEWORK = {
    "NON_FIELD_ERRORS_KEY": "error",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        'rest_framework_simplejwt.authentication.JWTAuthentication'
    ],
    "EXCEPTION_HANDLER": "drf_standardized_errors.handler.exception_handler",
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
            # "scheme": "Bearer",
            # "bearerFormat": "JWT",
        }
    },
    'USE_SESSION_AUTH': False,
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        weeks=env('ACCESS_TOKEN_LIFETIME_WEEKS'),
        days=env('ACCESS_TOKEN_LIFETIME_DAYS'),
        hours=env('ACCESS_TOKEN_LIFETIME_HOURS'),
        minutes=env('ACCESS_TOKEN_LIFETIME_MINUTES'),
    ),
    "REFRESH_TOKEN_LIFETIME": timedelta(
        weeks=env('REFRESH_TOKEN_LIFETIME_WEEKS'),
        days=env('REFRESH_TOKEN_LIFETIME_DAYS'),
        hours=env('REFRESH_TOKEN_LIFETIME_HOURS'),
        minutes=env('REFRESH_TOKEN_LIFETIME_MINUTES'),
    ),
    "SIGNING_KEY": SECRET_KEY,
    'AUTH_HEADER_TYPES': ("Bearer",),
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog_api.wsgi.app'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': dj_database_url.parse(env('DB_URL'))
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# # AWS S3 config
# AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
# AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
# AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
# AWS_S3_REGION_NAME = env('AWS_S3_REGION_NAME')
# AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
    os.path.join(BASE_DIR, 'gcp_credentials.json')
)
GS_PROJECT_ID = 'webappservices-416116'
GS_BUCKET_NAME = 'drf-blog-api-bucket'


if DEBUG:
    STATIC_ROOT = BASE_DIR / 'static_files'
    MEDIA_ROOT = BASE_DIR / 'media_files'
    STATIC_URL = '/static/'
    MEDIA_URL = '/media/'
else:
    DEFAULT_FILE_STORAGE = 'custom_storages.StaticStorage'
    STATICFILES_STORAGE = 'custom_storages.MediaStorage'
    STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/static/'
    MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/media/'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'accounts.User'
